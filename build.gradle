plugins {
	id 'fabric-loom' version '1.7.+'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = archives_base_name
version = "${mod_version}-${minecraft_version}"
group = maven_group

repositories {
	maven { url = "https://maven.parchmentmc.org" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://maven.terraformersmc.com/" }
	maven { url = "https://maven.ladysnake.org/" }
	maven { url = "https://jitpack.io" }

}

dependencies {
	minecraft "com.mojang:minecraft:$minecraft_version"

	mappings(loom.layered {
		it.officialMojangMappings { nameSyntheticMembers = false }
		it.parchment("org.parchmentmc.data:parchment-$parchment_minecraft_version:$parchment_version@zip")
	})

	modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
	modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")
	
	modImplementation "com.terraformersmc:modmenu:${mod_menu_version}"

	// Replace modImplementation with modApi if you expose components in your own API
//	modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}"
//	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional but recommended)
//	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}"
//
//	modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}"
//	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional but recommended)
//	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}"
//
//	modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${cca_version}"
//	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional but recommended)
//	include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${cca_version}"

	modImplementation(include("maven.modrinth:midnightlib:1.4.1-fabric"))
}

processResources {
	inputs.property "version", project.mod_version

	filesMatching("fabric.mod.json") {
		expand "version": project.mod_version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

jar {
	from "LICENSE"
}